#include <stdio.h>

#define MAX_PROCESSES 10

struct Process {
    int pid;
    int arrival_time;
    int burst_time;
    int completion_time;
    int turnaround_time;
    int waiting_time;
    int executed;
};

void non_preemptive_sjf(struct Process processes[], int n) {
    int current_time = 0;
    int completed = 0;
    int shortest_job_index;
    int i;

    printf("Time  Process\n");

    while (completed < n) {
        shortest_job_index = -1;

        // Find shortest job that has arrived
        for (i = 0; i < n; i++) {
            if (processes[i].arrival_time <= current_time && processes[i].executed == 0) {
                if (shortest_job_index == -1 || processes[i].burst_time < processes[shortest_job_index].burst_time) {
                    shortest_job_index = i;
                }
            }
        }

        if (shortest_job_index == -1) {
            // No process available for execution
            current_time++;
        } else {
            // Execute the shortest job
            printf("%d     P%d\n", current_time, processes[shortest_job_index].pid);
            processes[shortest_job_index].completion_time = current_time + processes[shortest_job_index].burst_time;
            processes[shortest_job_index].turnaround_time = processes[shortest_job_index].completion_time - processes[shortest_job_index].arrival_time;
            processes[shortest_job_index].waiting_time = processes[shortest_job_index].turnaround_time - processes[shortest_job_index].burst_time;
            processes[shortest_job_index].executed = 1;
            current_time += processes[shortest_job_index].burst_time;
            completed++;
        }
    }

    // Print process details
    printf("\nProcess  Arrival Time  Burst Time  Completion Time  Turnaround Time  Waiting Time\n");
    for (i = 0; i < n; i++) {
        printf("P%d\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].pid, processes[i].arrival_time, processes[i].burst_time, processes[i].completion_time, processes[i].turnaround_time, processes[i].waiting_time);
    }
}

int main() {
    int n, i;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[MAX_PROCESSES];

    // Input process details
    for (i = 0; i < n; i++) {
        printf("Enter details for Process P%d:\n", i + 1);
        processes[i].pid = i + 1;
        printf("Arrival Time: ");
        scanf("%d", &processes[i].arrival_time);
        printf("Burst Time: ");
        scanf("%d", &processes[i].burst_time);
        processes[i].completion_time = 0;
        processes[i].turnaround_time = 0;
        processes[i].waiting_time = 0;
        processes[i].executed = 0;
    }

    // Perform non-preemptive SJF scheduling
    non_preemptive_sjf(processes, n);

    return 0;
}
