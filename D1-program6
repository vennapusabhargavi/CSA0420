#include <stdio.h>

#define MAX_PROCESSES 10

struct Process {
    int pid;
    int priority;
    int burst_time;
    int remaining_time;
};

void preemptive_priority_scheduling(struct Process processes[], int n) {
    int current_time = 0;
    int completed = 0;
    int min_priority_index;
    int i;

    printf("Time  Process\n");

    while (completed < n) {
        min_priority_index = -1;

        // Find process with highest priority at current time
        for (i = 0; i < n; i++) {
            if (processes[i].remaining_time > 0 && processes[i].burst_time != 0) {
                if (min_priority_index == -1 || processes[i].priority < processes[min_priority_index].priority) {
                    min_priority_index = i;
                }
            }
        }

        if (min_priority_index == -1) {
            // No process available for execution
            current_time++;
        } else {
            // Execute the process with highest priority
            printf("%d     P%d\n", current_time, processes[min_priority_index].pid);
            processes[min_priority_index].remaining_time--;
            current_time++;

            // Check if the process has completed its execution
            if (processes[min_priority_index].remaining_time == 0) {
                completed++;
                processes[min_priority_index].burst_time = 0;
            }
        }
    }
}

int main() {
    int n, i;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[MAX_PROCESSES];

    // Input process details
    for (i = 0; i < n; i++) {
        printf("Enter details for Process P%d:\n", i + 1);
        processes[i].pid = i + 1;
        printf("Priority: ");
        scanf("%d", &processes[i].priority);
        printf("Burst Time: ");
        scanf("%d", &processes[i].burst_time);
        processes[i].remaining_time = processes[i].burst_time;
    }

    // Perform preemptive priority scheduling
    preemptive_priority_scheduling(processes, n);

    return 0;
}
